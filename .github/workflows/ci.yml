name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ===========================================================================
  # Lint and Format Check
  # ===========================================================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install flake8 black isort

      - name: Check formatting with black
        run: |
          black --check services/app/ || true

      - name: Check imports with isort
        run: |
          isort --check-only services/app/ || true

      - name: Lint with flake8
        run: |
          flake8 services/app/ --max-line-length=100 --extend-ignore=E203,W503 || true

  # ===========================================================================
  # Build Docker Images
  # ===========================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [app]  # Add more services as they're implemented
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} service
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: false
          tags: voicebot-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================================================
  # Health Check Test
  # ===========================================================================
  test:
    name: Health Check Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app service
        run: |
          docker build -t voicebot-app:test ./services/app

      - name: Create minimal .env
        run: |
          echo "OPENAI_COMPAT_BASE_URL=http://localhost:8001/v1" > .env
          echo "MODEL_NAME=test-model" >> .env
          echo "CORS_ORIGINS=http://localhost:3000" >> .env

      - name: Run app container
        run: |
          docker run -d --name test-app \
            --env-file .env \
            -p 8080:8080 \
            voicebot-app:test
          
          # Wait for container to be ready
          sleep 10

      - name: Test health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status $response"
            docker logs test-app
            exit 1
          fi
          echo "✅ Health check passed"

      - name: Test root endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$response" != "200" ]; then
            echo "Root endpoint failed with status $response"
            docker logs test-app
            exit 1
          fi
          echo "✅ Root endpoint passed"

      - name: Cleanup
        if: always()
        run: |
          docker stop test-app || true
          docker rm test-app || true

  # ===========================================================================
  # Security Scan
  # ===========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './services/app'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail on vulnerabilities yet

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

